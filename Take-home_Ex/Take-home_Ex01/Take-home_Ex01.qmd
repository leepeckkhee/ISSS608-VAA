---
title: "Take-home Exercise 1"
author: "Lee Peck Khee"
date: 2 May 2023
date-modified: last-modified
edit: visual
execute: 
  echo: true
  eval: true
  warning: false
---

## 1. The Task

The task is to apply the concepts and methods learned in Lesson 1-4 to reveal the demographic and financial characteristics of the city of Engagement by using appropriate static and interactive statistical graphics methods. This exercise requires a user-friendly and interactive solution that helps city managers and planners to explore the complex data in an engaging way and reveal hidden patterns.

## 2. Description of Dataset

For the purpose of this study, two data sets are provided. They are:

Participants.csv: Contains information about the residents of City of Engagement that have agreed to participate in this study.

-   participantId (integer): unique ID assigned to each participant.
-   householdSize (integer): the number of people in the participant's household
-   haveKids (boolean): whether there are children living in the participant's household.
-   age (integer): participant's age in years at the start of the study.
-   educationLevel (string factor): the participant's education level, one of: {"Low", "HighSchoolOrCollege", "Bachelors", "Graduate"}
-   interestGroup (char): a char representing the participant's stated primary interest group, one of {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J"}. Note: specific topics of interest have been redacted to avoid bias.
-   joviality (float): a value ranging from \[0,1\] indicating the participant's overall happiness level at the start of the study.

FinancialJournal.csv: Contains information about financial transactions.

-   participantId (integer): unique ID corresponding to the participant affected
-   timestamp (datetime): the time when the check-in was logged
-   category (string factor): a string describing the expense category, one of {"Education", "Food", "Recreation", "RentAdjustment", "Shelter", "Wage"}
-   amount (double): the amount of the transaction

## 3. Data Wrangling and Preparation

### 3.1 Installing Requisite R packages

```{r}
pacman::p_load(plotly, lubridate, tidyverse, psych, ggridges, gganimate, ggrepel, tidyr, ggstatsplot, ggside)
```

### 3.2 Loading the Dataset

```{r}
financialjournal <- read_csv("data/financialjournal.csv")
participants <- read_csv("data/participants.csv")
```

### 3.3 Data Preparation


| Issues                                                                                                                                                         | Description                                                                                                                                                                                                                                                                                                                                             | Resolution                                                                                                                                                                           |

| Duplicated records                                                                                                                                             | There are duplicated records within **`financialjournal`** dataset.                                                                                                                                                                                                                                                                                     | Duplicated records were removed                                                                                                                                                      |

| Lack of additional useful features                                                                                                                             | Additional features such as **`Savings`**, and **`Spending`** to aggregate how much an individual spends and saved relative to their wage can be useful in gaining a deeper understanding of each person's financial habits                                                                                                                             | New variables were created, specifically in relation to **`Savings`** (Wage - Education - Food - Recreation - Shelter) and **`Spending`** (Education + Food + Recreation + Shelter). |

| Inaccuracies within the **`Shelter`** recorded amount                                                                                                          | There is a column called **`RentAdjustment`** in the original dataset which if we do not net off with the **`Shelter`** recorded amount, it will artificially inflate the individual's spending amount                                                                                                                                                  | The updated **`Shelter`** values was calculated to incorporate **`RentAdjustment`** where applicable.                                                                                |

| Missing monthly values for 10 participants                                                                                                                     | Participant IDs: 44, 127, 142, 154, 161, 256, 262, 267, 279, 285, only have one month of data in March 2022. Hence, we need to be cautious when using their data in section 4.1 and 4.2                                                                                                                                                                 | These Participant IDs were excluded from the analysis in section 4.1 and 4.2                                                                                                         |

| Lack of an average metric in relation to **`Wage`**, **`Savings`**, **`Spending`** and its associated sub-categories (such as Education, Food, Recreation etc) | Given that there are two dataset, **`participants`** and **`financialjournal`** for further analysis, it is useful to merge both dataset together for further analysis. However, **`financialjournal`** dataset presents the spending habits of individual at too granular a level for it to be effectively merged with the **`participants`** dataset. | An average metric was computed for **`Wage`**, **`Savings`**, **`Spending`** and its associated sub categories (such as Education, Food, Recreation etc).                            |
|                                                                                                                                                                |                                                                                                                                                                                                                                                                                                                                                         |                                                                                                                                                                                      |
|                                                                                                                                                                | It is also noted that the data spans across twelve months and hence an average metric is suitable as it implies the average yearly financial habits of individuals.                                                                                                                                                                                     |                                                                                                                                                                                      |




#### 3.3.1 Check for missing and duplicate records

**`isna()`** function is used to confirm that there are no missing values in both dataset.

```{r}
#| code-fold: true
#| code-summary: "Show code"
any(is.na(participants))
any(is.na(financialjournal))
```

**`duplicated()`** function is used to check for duplicated records in both dataset.

```{r}
#| code-fold: true
#| code-summary: "Show code"
duplicated_check_participants <- participants %>% filter(duplicated(participants))
duplicated_check_financialjournal <- financialjournal %>% filter(duplicated(financialjournal))
duplicated_check_participants
duplicated_check_financialjournal
```

Upon finding out that there are duplicated entries, we proceed to exclude the duplicated records as shown in the code below.

```{r}
#| code-fold: true
#| code-summary: "Show code"
financialjournal <- distinct(financialjournal)
```

#### 3.3.2 Creation of new additional useful variables and cleaning of "Shelter" column

Thereafter, we performed the below steps via the code below:

1.  Leveraged on **`mutate()`** function to create a new column called **`timestamp`**, to set it to the start of the month for each observation. Ten new columns were also created using **`mutate()`**: **`savings`**, **`spending`**, and **`YearMonth`**. category and **`Wage`**, which contains the mean value for Education, Food, Recreation, Shelter, Wage, Savings and Spending. The **`mutate_all()`** function is used to convert all numeric columns to absolute values via **`abs()`**.

2.  Data is then grouped by **`participantId`**, **`timestamp`**, and **`category`** using **`group_by()`** before using the **`summarize()`** function to calculate the sum of **`amount`** for each group.

3.  The **`pivot_wider()`** function is used to pivot the data into one column for each category and its corresponding **`amount`** values. values_fill is set as 0 to cater for scenario where categories may have a missing value.

4.  The **`Shelter`** column is adjusted by adding **`RentAdjustment`** to it.

5.  The final output is then grouped by **`participantId`** and **`YearMonth`**.

```{r}
#| code-fold: true
#| code-summary: "Show code"
financialjournal_new <- financialjournal %>%
   mutate(timestamp = lubridate::floor_date(timestamp, unit = "month")) %>%
  group_by(participantId, timestamp, category) %>%
  summarize(amount = sum(amount)) %>%
  pivot_wider(names_from = category, 
              values_from = amount,
              values_fill = 0) %>%
  mutate(Shelter = Shelter + RentAdjustment,
         savings = Wage - Education - Food - Recreation - Shelter,
         spending = Education + Food + Recreation + Shelter) %>%
  select(participantId, timestamp, Education:Shelter, Wage, savings, spending, -RentAdjustment) %>%
  mutate_all(~ifelse(is.numeric(.), abs(.), .)) %>%
  mutate(YearMonth = format(timestamp, "%b %Y")) %>%
  group_by(participantId, YearMonth) %>%
  mutate(avg_education = mean(Education),
         avg_food = mean(Food),
         avg_recreation = mean(Recreation),
         avg_shelter = mean(Shelter),
         avg_wage = mean(Wage),
         avg_savings = mean(savings),
         avg_spending = mean(spending))
```

We then gain a more detailed insight into the updated **`Wage`**, **`Savings`**, **`SpendingWage`**, **`Savings`**, **`Spending`** dataset via psych.

```{r}
#| code-fold: true
#| code-summary: "Show code"
psych::describe(financialjournal_new)
```

#### 3.3.3 Check on Participants' record to ensure they all have 12 months of data

Thereafter, we group the data by the **`YearMonth`** variable to calculate the total amount on each segment (e.g. **`Education`**, **`Food`**, **`Recreation`**, **`Shelter`** and **`Wage`**). It appears that in the month of Mar 2022, there is a huge spike in the total **`Wage`** amount. This can potentially be a case of bonus payout period. However, we will take a closer look in the subsequent section.

```{r}
#| code-fold: true
#| code-summary: "Show code"
financialjournal_monthly <- financialjournal_new %>%
  group_by(YearMonth) %>%
  summarize(total_Education = sum(Education),
            total_Food = sum(Food),
            total_Recreation = sum(Recreation),
            total_Shelter = sum(Shelter),
            total_Wage = sum(Wage))

financialjournal_monthly
```

Given that we will perform a Ridgeplot analysis subsequently, we want to confirm that all participants indeed have 12 months of records. Running the code below shows us that there are ten individuals (Participant IDs: 44, 127, 142, 154, 161, 256, 262, 267, 279, 285) who do not have 12 months of records. Interestingly, they all only have one month of record which falls on Mar 2022.

```{r}
#| code-fold: true
#| code-summary: "Show code"
# Get the list of participantIds with only one month of data
participants_check <- financialjournal_new %>%
  group_by(participantId) %>%
  summarize(num_months = n_distinct(YearMonth)) %>%
  filter(num_months != 12) %>%
  pull(participantId)

# Filter financialjournal_new to sieve out rows with participantIds that have only one month of data
financialjournal_new %>%
  filter((participantId %in% participants_check))

```

## 4. Data Visualisation

### 4.1 Expenditure of Participants over time period of March 2022 to March 2023

Given the above findings, we will proceed to exclude the ten Participant IDs from our ridgeplot analysis. Ridgeline plot consists of a set of overlapped density plots to help with comparing of multiple distributions in the dataset, and is especially useful to visualise the changes in our key parameters in distribution over time (12 month span).

-   **`Education`**, **`Food`**, **`Recreation`** and **`Shelter`** amounts are extracted and arranged in a long format using pivot_longer()
-   **`ggplot()`** function is used to create a plot with the amount on the x-axis, category on the y-axis
-   **`stat_density_ridges()`** function adds density ridges to the plot to show the distribution of spending amounts
-   **`transition_time()`** function is used to animate the plot from March 2022 to March 2023
-   **`scale_x_continuous()`** was utilised to set the x-axis limits to be in line with the range of spending amounts within the dataset

From the first Ridgeline graph, we can observe that **`Recreation`** and **`Food`** expenses tend to have a larger fluctuation across a twelve month period from March 2022 to March 2023 as compared to other spend categories.

::: panel-tabset
## The Plot

```{r, fig.width=8, fig.height=6}
#| echo: false
financialjournal_expendituredetails <- financialjournal_new %>%
  pivot_longer(cols = c("Education", "Food", "Recreation", "Shelter"),
               names_to = "category", values_to = "amount") %>%
  arrange(participantId, timestamp) %>%
  filter(!participantId %in% c(44, 127, 142, 154, 161, 256, 262, 267, 279, 285))

financialjournal_expendituredetails %>%
  mutate(timestamp = floor_date(timestamp, unit = "day")) %>%
  ggplot(aes(x = amount, y = category, fill = category)) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) + scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges() +
  labs(title = "Amounts by Category from Mar 2022 to Mar 2023: {frame_time}",
       x = "Amount",
       y = "") +
  transition_time(timestamp) +
  ease_aes("linear") +
  scale_x_continuous(limits = range(financialjournal_expendituredetails$amount))
```

## The Code Chunk

```{r, fig.width=8, fig.height=6}
#| eval: false
financialjournal_expendituredetails <- financialjournal_new %>%
  pivot_longer(cols = c("Education", "Food", "Recreation", "Shelter"),
               names_to = "category", values_to = "amount") %>%
  arrange(participantId, timestamp) %>%
  filter(!participantId %in% c(44, 127, 142, 154, 161, 256, 262, 267, 279, 285))

financialjournal_expendituredetails %>%
  mutate(timestamp = floor_date(timestamp, unit = "day")) %>%
  ggplot(aes(x = amount, y = category, fill = category)) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) + scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges() +
  labs(title = "Amounts by Category from Mar 2022 to Mar 2023: {frame_time}",
       x = "Amount",
       y = "") +
  transition_time(timestamp) +
  ease_aes("linear") +
  scale_x_continuous(limits = range(financialjournal_expendituredetails$amount))
```
:::

### 4.2 Wage, Overall Spending and Savings of Participants over time period of March 2022 to March 2023

For the second Ridgeline graph below, the approach is very similar with that outlined in section 4.1. Specifically, here we want to gain a closer insight into an individuals' **`Spending`**, **`Savings`** and **`Wage`**. We can observe that an individuals' **`Spending`** is largely center around a common range despite the huge variation in **`Wage`**. **`Savings`** and **`Wage`** tend to have a wider spread as compared to **`Spending`**.

::: panel-tabset
## The Plot

```{r, fig.width=8, fig.height=6}
#| echo: false
financialjournal_wagesavings <- financialjournal_new %>%
  pivot_longer(cols = c("Wage","spending","savings"),
               names_to = "category", values_to = "amount") %>%
  arrange(participantId, timestamp) %>%
  filter(!participantId %in% c(44, 127, 142, 154, 161, 256, 262, 267, 279, 285))

financialjournal_wagesavings %>%
  mutate(timestamp = floor_date(timestamp, unit = "day")) %>%
  ggplot(aes(x = amount, y = category, fill = category)) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) + scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges() +
  labs(title = "Amounts by Category from Mar 2022 to Mar 2023: {frame_time}",
       x = "Amount",
       y = "") +
  transition_time(timestamp) +
  ease_aes("linear") +
  scale_x_continuous(limits = range(financialjournal_wagesavings$amount))

```

## The Code Chunk

```{r, fig.width=8, fig.height=6}
#| eval: false
financialjournal_wagesavings <- financialjournal_new %>%
  pivot_longer(cols = c("Wage","spending","savings"),
               names_to = "category", values_to = "amount") %>%
  arrange(participantId, timestamp) %>%
  filter(!participantId %in% c(44, 127, 142, 154, 161, 256, 262, 267, 279, 285))

financialjournal_wagesavings %>%
  mutate(timestamp = floor_date(timestamp, unit = "day")) %>%
  ggplot(aes(x = amount, y = category, fill = category)) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) + scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges() +
  labs(title = "Amounts by Category from Mar 2022 to Mar 2023: {frame_time}",
       x = "Amount",
       y = "") +
  transition_time(timestamp) +
  ease_aes("linear") +
  scale_x_continuous(limits = range(financialjournal_wagesavings$amount))

```
:::

Next, we carve out a dataframe called **`financialjournal_avg`** which contains the average values for **`Education`**, **`Food`**, **`Recreation`**, **`Shelter`**, **`Wage`**, **`Savings`**, **`Spending`** for each **`ParticiapntId`**.

```{r}
#| code-fold: true
#| code-summary: "Show code"
financialjournal_avg <- financialjournal_new %>%
  group_by(participantId) %>%
  summarize(avg_education = mean(Education),
            avg_food = mean(Food),
            avg_recreation = mean(Recreation),
            avg_shelter = mean(Shelter),
            avg_wage = mean(Wage),
            avg_savings = mean(savings),
            avg_spending = mean(spending))

financialjournal_avg
```

We then proceed to merge the above dataset with that of **`participants`** dataset for further analysis.

```{r}
#| code-fold: true
#| code-summary: "Show code"
merged_data <- left_join(financialjournal_avg, participants, by = "participantId")
```

**`isna()`** function was utilised to confirm that there are no missing values post the merge.

```{r}
#| code-fold: true
#| code-summary: "Show code"
any(is.na(merged_data))
```

### 4.3 Age Bucket Amongst Participants

We sliced the age groups into three main buckets, 1) 18 - 30 years old, 2) 31 - 55 years old and 3) \>55 years old. This was done to delineate the young adults, middle aged adults, and senior adults.

```{r}
#| code-fold: true
#| code-summary: "Show code"
merged_data$age_group<- cut(merged_data$age, breaks = c(17, 30, 55, Inf), 
                              labels = c("18-30", "31-55", ">55"))
```

We delve deeper into the age group of the participants to better understand the demographics on hand. We perform the below steps:

-   summarized the data via **`group_by()`** and **`summarize()`** functions to calculate the number of participants in each age bucket before arriving at the percentage values via **`mutate()`** function
-   used **`geom_col()`** to create a bar chart for each age group
-   used **`coord_polar()`** to convert the bar chart to a pie chart
-   used **`geom_label_repel()`** to add percentage labels to each segment of the pie chart
-   used **`guides()`** to add titles to the legend
-   used **`labs()`** to add a title to the chart

::: panel-tabset
## The Plot

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 10
age_count <- merged_data %>%
  group_by(age_group) %>%
  summarize(count = n()) %>%
  mutate(age_pct = round(count/sum(count)*100)) %>%
  mutate(ypos_p = rev(cumsum(rev(age_pct))),
         pos_p = age_pct/2 + lead(ypos_p, 1),
         pos_p = if_else(is.na(pos_p), age_pct/2, pos_p))

ggplot(age_count, aes(x = "", y = age_pct, fill = fct_inorder(age_group))) +
  geom_col(width = 1, color = 1) +
  coord_polar(theta = "y") +
  scale_fill_brewer(palette = "YlGnBu") +
  geom_label_repel(data = age_count,
                   aes(y = pos_p, label = paste0(age_pct, "%"), color = age_group),
                   size = 4.5, nudge_x = 1, show.legend = FALSE) +
  guides(fill = guide_legend(title = "Age Group"), color = guide_legend(title = "Age Group")) +
  labs(title = "Proportion of Age Group amongst Participants") +
  theme(legend.position = "bottom") +
  theme_minimal() +
  theme(axis.title = element_blank())
```

## The Code Chunk

```{r}
#| eval: false
#| fig-width: 10
#| fig-height: 10
age_count <- merged_data %>%
  group_by(age_group) %>%
  summarize(count = n()) %>%
  mutate(age_pct = round(count/sum(count)*100)) %>%
  mutate(ypos_p = rev(cumsum(rev(age_pct))),
         pos_p = age_pct/2 + lead(ypos_p, 1),
         pos_p = if_else(is.na(pos_p), age_pct/2, pos_p))

ggplot(age_count, aes(x = "", y = age_pct, fill = fct_inorder(age_group))) +
  geom_col(width = 1, color = 1) +
  coord_polar(theta = "y") +
  scale_fill_brewer(palette = "YlGnBu") +
  geom_label_repel(data = age_count,
                   aes(y = pos_p, label = paste0(age_pct, "%"), color = age_group),
                   size = 4.5, nudge_x = 1, show.legend = FALSE) +
  guides(fill = guide_legend(title = "Age Group"), color = guide_legend(title = "Age Group")) +
  labs(title = "Proportion of Age Group amongst Participants") +
  theme(legend.position = "bottom") +
  theme_minimal() +
  theme(axis.title = element_blank())
```
:::

### 4.4 Education Level Amongst Participants

We utilised the same method as outlined in section 4.3 to delve deeper into the education background level of the participants to better understand the demographics on hand.

::: panel-tabset
## The Plot

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 10
education_count <- merged_data %>%
  group_by(educationLevel) %>%
  summarize(
    count = n()) %>% 
  mutate(educationlevel_pct = round(count/sum(count)*100)) %>% 
  mutate(ypos_p = rev(cumsum(rev(educationlevel_pct))),
         pos_p = educationlevel_pct/2 + lead(ypos_p,1),
         pos_p = if_else(is.na(pos_p), educationlevel_pct/2, pos_p))

ggplot(education_count, aes(x = "" , y = educationlevel_pct, fill = fct_inorder(educationLevel))) +
  geom_col(width = 1, color = 1) +
  coord_polar(theta = "y") +
  scale_fill_brewer(palette = "YlGnBu") +
  geom_label_repel(data = education_count,
                   aes(y = pos_p, label = paste0(educationlevel_pct, "%"), color = educationLevel),
                   size = 4.5, nudge_x = 1, show.legend = FALSE) +
  guides(fill = guide_legend(title = "Education Level"), color = guide_legend(title = "Education Level")) +
  labs(title = "Proportion of Education Levels amongst Participants") +
  theme(legend.position = "bottom") +
  theme_minimal() +
  theme(axis.title = element_blank())

```

## The Code Chunk

```{r}
#| eval: false
#| fig-width: 10
#| fig-height: 10
education_count <- merged_data %>%
  group_by(educationLevel) %>%
  summarize(
    count = n()) %>% 
  mutate(educationlevel_pct = round(count/sum(count)*100)) %>% 
  mutate(ypos_p = rev(cumsum(rev(educationlevel_pct))),
         pos_p = educationlevel_pct/2 + lead(ypos_p,1),
         pos_p = if_else(is.na(pos_p), educationlevel_pct/2, pos_p))

ggplot(education_count, aes(x = "" , y = educationlevel_pct, fill = fct_inorder(educationLevel))) +
  geom_col(width = 1, color = 1) +
  coord_polar(theta = "y") +
  scale_fill_brewer(palette = "YlGnBu") +
  geom_label_repel(data = education_count,
                   aes(y = pos_p, label = paste0(educationlevel_pct, "%"), color = educationLevel),
                   size = 4.5, nudge_x = 1, show.legend = FALSE) +
  guides(fill = guide_legend(title = "Education Level"), color = guide_legend(title = "Education Level")) +
  labs(title = "Proportion of Education Levels amongst Participants") +
  theme(legend.position = "bottom") +
  theme_minimal() +
  theme(axis.title = element_blank())

```
:::

### 4.5 Violin Plot across Education Level

Next, we leverage on violin plot to take a closer look at how spending (overall and across various sub categories), savings, wage and joviality differs across education level. Violin plots are useful especially when we want to observe the distribution, peaks, valleys and tails of each group's density curve to identify how similar or dissimilar the various groups are.

The plot is created via:

-   **`plot_ly()`** function to create the violin plot. Within the **`plot_ly()`** function, the x-axis of the plot is specified as educationlevel and the y-axis is set to avg_wage initially but will dynamically update thereafter upon the specified selection.

-   **`layout()`** function to define the title of the plot, x-axis labels, y-axis labels, and the dropdown menu via the updatemenus argument.

::: panel-tabset
## The Plot

```{r}
#| echo: false
#| fig-width: 4
#| fig-height: 4
plot_ly(data = merged_data,
        x = ~educationLevel,
        y = ~avg_wage,
        line = list(width = 1),
        type = "violin",
        marker = list(opacity = 0.5,
                      line = list(width = 2)),
        box = list(visible = T),
        meanline = list(visible = T,
                        color = "rgb(231, 99, 250)")) |>
  layout(title = "Distribution of key factors by Education Level",
         xaxis = list(title = "Education Level"),
         yaxis = list(title = "Average Ëducation Expenses"),
         updatemenus = list(list(type = 'dropdown',
                                 xref = "paper",
                                 yref = "paper",
                                 xanchor = "left",
                                 x = 0.04, 
                                 y = 0.95,
                                 buttons = list(
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_education)),
                                                    list(yaxis = list(title = "Average Education"))),
                                        label = "Average Education Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_food)),
                                                    list(yaxis = list(title = "Average Food"))),
                                        label = "Average Food Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_recreation)),
                                                    list(yaxis = list(title = "Average Recreation"))),
                                        label = "Average Recreation Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_shelter)),
                                                    list(yaxis = list(title = "Average Shelter"))),
                                        label = "Average Shelter Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_wage)),
                                                    list(yaxis = list(title = "Average Wage"))),
                                        label = "Average Wage"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_savings)),
                                                    list(yaxis = list(title = "Average Savings"))),
                                        label = "Average Savings"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_spending)),
                                                    list(yaxis = list(title = "Average Spending"))),
                                        label = "Average Spending"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$joviality)),
                                                    list(yaxis = list(title = "Joviality"))),
                                        label = "Joviality")
                              
                                   )
                                 )
                            )
         )

```

## The Code Chunk

```{r}
#| eval: false
#| fig-width: 4
#| fig-height: 4
plot_ly(data = merged_data,
        x = ~educationLevel,
        y = ~avg_wage,
        line = list(width = 1),
        type = "violin",
        marker = list(opacity = 0.5,
                      line = list(width = 2)),
        box = list(visible = T),
        meanline = list(visible = T,
                        color = "rgb(231, 99, 250)")) |>
  layout(title = "Distribution of key factors by Education Level",
         xaxis = list(title = "Education Level"),
         yaxis = list(title = "Average Ëducation Expenses"),
         updatemenus = list(list(type = 'dropdown',
                                 xref = "paper",
                                 yref = "paper",
                                 xanchor = "left",
                                 x = 0.04, 
                                 y = 0.95,
                                 buttons = list(
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_education)),
                                                    list(yaxis = list(title = "Average Education"))),
                                        label = "Average Education Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_food)),
                                                    list(yaxis = list(title = "Average Food"))),
                                        label = "Average Food Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_recreation)),
                                                    list(yaxis = list(title = "Average Recreation"))),
                                        label = "Average Recreation Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_shelter)),
                                                    list(yaxis = list(title = "Average Shelter"))),
                                        label = "Average Shelter Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_wage)),
                                                    list(yaxis = list(title = "Average Wage"))),
                                        label = "Average Wage"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_savings)),
                                                    list(yaxis = list(title = "Average Savings"))),
                                        label = "Average Savings"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_spending)),
                                                    list(yaxis = list(title = "Average Spending"))),
                                        label = "Average Spending"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$joviality)),
                                                    list(yaxis = list(title = "Joviality"))),
                                        label = "Joviality")
                              
                                   )
                                 )
                            )
         )

```
:::

### 4.6 Violin Plot across Interest Group

Next, we leverage on violin plot to take a closer look at how spending (overall and across various sub categories), savings, wage and joviality differs across Interest Group.

::: panel-tabset
## The Plot

```{r}
#| echo: false
#| fig-width: 4
#| fig-height: 4
plot_ly(data = merged_data,
        x = ~interestGroup,
        y = ~avg_wage,
        line = list(width = 1),
        type = "violin",
        marker = list(opacity = 0.5,
                      line = list(width = 2)),
        box = list(visible = T),
        meanline = list(visible = T,
                        color = "rgb(231, 99, 250)")) |>
  layout(title = "Distribution of key factors by Interest Group",
         xaxis = list(title = "Interest Group"),
         yaxis = list(title = "Average Ëducation Expenses"),
         updatemenus = list(list(type = 'dropdown',
                                 xref = "paper",
                                 yref = "paper",
                                 xanchor = "left",
                                 x = 0.04, 
                                 y = 0.95,
                                 buttons = list(
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_education)),
                                                    list(yaxis = list(title = "Average Education Expenses"))),
                                        label = "Average Education"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_food)),
                                                    list(yaxis = list(title = "Average Food Expenses"))),
                                        label = "Average Food"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_recreation)),
                                                    list(yaxis = list(title = "Average Recreation Expenses"))),
                                        label = "Average Recreation"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_shelter)),
                                                    list(yaxis = list(title = "Average Shelter Expenses"))),
                                        label = "Average Shelter"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_wage)),
                                                    list(yaxis = list(title = "Average Wage"))),
                                        label = "Average Wage"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_savings)),
                                                    list(yaxis = list(title = "Average Savings"))),
                                        label = "Average Savings"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_spending)),
                                                    list(yaxis = list(title = "Average Spending"))),
                                        label = "Average Spending"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$joviality)),
                                                    list(yaxis = list(title = "Joviality"))),
                                        label = "Joviality")
                                   )
                                 )
                            )
         )

```

## The Code Chunk

```{r}
#| eval: false
#| fig-width: 4
#| fig-height: 4
plot_ly(data = merged_data,
        x = ~interestGroup,
        y = ~avg_wage,
        line = list(width = 1),
        type = "violin",
        marker = list(opacity = 0.5,
                      line = list(width = 2)),
        box = list(visible = T),
        meanline = list(visible = T,
                        color = "rgb(231, 99, 250)")) |>
  layout(title = "Distribution of key factors by Interest Group",
         xaxis = list(title = "Interest Group"),
         yaxis = list(title = "Average Ëducation Expenses"),
         updatemenus = list(list(type = 'dropdown',
                                 xref = "paper",
                                 yref = "paper",
                                 xanchor = "left",
                                 x = 0.04, 
                                 y = 0.95,
                                 buttons = list(
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_education)),
                                                    list(yaxis = list(title = "Average Education Expenses"))),
                                        label = "Average Education"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_food)),
                                                    list(yaxis = list(title = "Average Food Expenses"))),
                                        label = "Average Food"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_recreation)),
                                                    list(yaxis = list(title = "Average Recreation Expenses"))),
                                        label = "Average Recreation"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_shelter)),
                                                    list(yaxis = list(title = "Average Shelter Expenses"))),
                                        label = "Average Shelter"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_wage)),
                                                    list(yaxis = list(title = "Average Wage"))),
                                        label = "Average Wage"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_savings)),
                                                    list(yaxis = list(title = "Average Savings"))),
                                        label = "Average Savings"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_spending)),
                                                    list(yaxis = list(title = "Average Spending"))),
                                        label = "Average Spending"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$joviality)),
                                                    list(yaxis = list(title = "Joviality"))),
                                        label = "Joviality")
                                   )
                                 )
                            )
         )

```
:::

### 4.7 Violin Plot across Age Group

Next, we leverage on violin plot to take a closer look at how spending (overall and across various sub categories), savings, wage and joviality differs across age groups.

::: panel-tabset
## The Plot

```{r}
#| echo: false
#| fig-width: 4
#| fig-height: 4
plot_ly(data = merged_data,
        x = ~age_group,
        y = ~avg_wage,
        line = list(width = 1),
        type = "violin",
        marker = list(opacity = 0.5,
                      line = list(width = 2)),
        box = list(visible = T),
        meanline = list(visible = T,
                        color = "rgb(231, 99, 250)")) |>
  layout(title = "Distribution of key factors by Age Group",
         xaxis = list(title = "Age Group"),
         yaxis = list(title = "Average Ëducation Expenses"),
         updatemenus = list(list(type = 'dropdown',
                                 xref = "paper",
                                 yref = "paper",
                                 xanchor = "left",
                                 x = 0.04, 
                                 y = 0.95,
                                 buttons = list(
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_education)),
                                                    list(yaxis = list(title = "Average Education"))),
                                        label = "Average Education Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_food)),
                                                    list(yaxis = list(title = "Average Food"))),
                                        label = "Average Food Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_recreation)),
                                                    list(yaxis = list(title = "Average Recreation"))),
                                        label = "Average Recreation Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_shelter)),
                                                    list(yaxis = list(title = "Average Shelter"))),
                                        label = "Average Shelter Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_wage)),
                                                    list(yaxis = list(title = "Average Wage"))),
                                        label = "Average Wage"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_savings)),
                                                    list(yaxis = list(title = "Average Savings"))),
                                        label = "Average Savings"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_spending)),
                                                    list(yaxis = list(title = "Average Spending"))),
                                        label = "Average Spending"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$joviality)),
                                                    list(yaxis = list(title = "Joviality"))),
                                        label = "Joviality")
                              
                                   )
                                 )
                            )
         )

```

## The Code Chunk

```{r}
#| eval: false
#| fig-width: 4
#| fig-height: 4
plot_ly(data = merged_data,
        x = ~age_group,
        y = ~avg_wage,
        line = list(width = 1),
        type = "violin",
        marker = list(opacity = 0.5,
                      line = list(width = 2)),
        box = list(visible = T),
        meanline = list(visible = T,
                        color = "rgb(231, 99, 250)")) |>
  layout(title = "Distribution of key factors by Age Group",
         xaxis = list(title = "Age Group"),
         yaxis = list(title = "Average Ëducation Expenses"),
         updatemenus = list(list(type = 'dropdown',
                                 xref = "paper",
                                 yref = "paper",
                                 xanchor = "left",
                                 x = 0.04, 
                                 y = 0.95,
                                 buttons = list(
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_education)),
                                                    list(yaxis = list(title = "Average Education"))),
                                        label = "Average Education Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_food)),
                                                    list(yaxis = list(title = "Average Food"))),
                                        label = "Average Food Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_recreation)),
                                                    list(yaxis = list(title = "Average Recreation"))),
                                        label = "Average Recreation Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_shelter)),
                                                    list(yaxis = list(title = "Average Shelter"))),
                                        label = "Average Shelter Expenses"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_wage)),
                                                    list(yaxis = list(title = "Average Wage"))),
                                        label = "Average Wage"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_savings)),
                                                    list(yaxis = list(title = "Average Savings"))),
                                        label = "Average Savings"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$avg_spending)),
                                                    list(yaxis = list(title = "Average Spending"))),
                                        label = "Average Spending"),
                                   list(method = "update",
                                        args = list(list(y = list(merged_data$joviality)),
                                                    list(yaxis = list(title = "Joviality"))),
                                        label = "Joviality")
                              
                                   )
                                 )
                            )
         )

```
:::

### 4.8 Correlation between wage and spending

In this section, we are keen to explore if there is a correlation between wage and spending. We utilised **`ggstatsplot`** and **`ggscatterstats`** function to calculate the correlation and plot a chart. Interestingly, there is a weak positive correlation at 0.14 between wage and spending.

::: panel-tabset
## The Plot

```{r}
#| echo: false
#| fig-width: 7
#| fig-height: 7
ggstatsplot::ggscatterstats(data = merged_data, x = "avg_wage", y = "avg_spending")
```

## The Code Chunk

```{r}
#| eval: false
#| fig-width: 7
#| fig-height: 7
ggstatsplot::ggscatterstats(data = merged_data, x = "avg_wage", y = "avg_spending")
```
:::

### 4.9 Correlation between wage and joviality

We are also keen to explore if there is a correlation between wage and joviality. Interestingly, there is a moderately weak negative correlation at -0.33 between wage and spending.

::: panel-tabset
## The Plot

```{r}
#| echo: false
#| fig-width: 7
#| fig-height: 7
ggstatsplot::ggscatterstats(data = merged_data, x = "avg_wage", y = "joviality")
```

## The Code Chunk

```{r}
#| eval: false
#| fig-width: 7
#| fig-height: 7
ggstatsplot::ggscatterstats(data = merged_data, x = "avg_wage", y = "joviality")
```
:::

## 5. Future Work

For future work, we can consider to further enhance on the testing of whether for example avg_education, avg_food, avg_recreation, avg_shelter, avg_wage, avg_savings, avg_spending or joviality are statistically different across the various interest groups, education levels or age groups. This can be done via first checking for normality assumptions before determining which tests (e.g. Anova) to use.

Further analysis such as whether individuals who have kids have a higher joviality can also be investigated and tested accordingly.
